#include<stdio.h>
#include<stdlib.h>

struct stack
{
    int num;
    struct stack *nxt;
}*top=NULL;
typedef struct stack stk;

void push();
int pop();
int peek();
int isEmpty();
void display();

int main()
{
    int ch;
    while(1)
    {
        printf("1.Push\n");
        printf("2.Pop\n");
        printf("3.Display item at the top\n");
        printf("4.Display all items of the stack\n");
        printf("5.Quit\n");
        printf("Enter your choice : ") ;
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
                push();
                break;
            case 2:
                printf("\nThe popped element is: %d\n",pop());
                break;
            case 3:
                printf("\nThe element at the top is: %d\n",peek());
                break;
            case 4:
                display();
                break;
            case 5:
                exit(1);
            default:
                printf("\nWrong Choice!!!\n");
        }
    }
}
void push()
{
    stk *new=(stk *)malloc(sizeof(stk *));
    if(new==NULL)
    {
        printf("Stack Overflow\n");
        return;
    }
    printf("Enter the number to be pushed");
    scanf("%d",&new->num);
    new->nxt=top;
    top=new;
}
int pop()
{
    if(!isEmpty())
    {
        int n=top->num;
        top=top->nxt;
        return n;
    }
    exit(1);
}
int peek()
{
    if(!isEmpty())
        return (top->num);
    exit(1);
}
int isEmpty()
{
    if(top==NULL)
    {
        printf("\nThe stack is empty\n");

        return 1;
    }
    else
        return 0;
    
}
void display()
{
    stk *p=top;
    if(!isEmpty())
    {
        printf("The stack is:\n");
        while(p!=NULL)
        {
            printf("%d\n",p->num);
            p=p->nxt;
        }
    }
}
